name: Releasing

# Run this workflow every time a commit tagged v* is pushed
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  release:
    name: Release on GitHub
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of the repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Generate the HTML output using asciidoctor
      - name: Generate HTML
        uses: mgred/asciidoctor-action@master
        with:
            args: asciidoctor README.adoc

      # Extract release notes following "Keep-a-changelog" convention
      # see: https://github.com/ffurrer2/extract-release-notes
      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1

      # Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, no need to create one explicitly
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: ${{ steps.extract-release-notes.outputs.release_notes }} # The notes extracted above

      # Get the version tag, making it available to subsequent steps
      # From: https://github.community/t/how-to-get-just-the-tag-name/16241/17
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

      # Upload the generated HTML as a release asset
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          asset_path: ./README.html
          asset_name: ${{ steps.get_version.outputs.VERSION }}.html
          asset_content_type: text/html

      # Checks out a copy of the repository branch "gh-pages" on the ubuntu-latest machine
      - name: Checkout publication branch
        uses: actions/checkout@v2
        with:
          ref: 'gh-pages'
          clean: false

      # Commit the generated html to gh-pages branch, making it available as a github page.
      - name: Commit the generated html
        run: |
          mkdir -p versions
          mv README.html versions/${{ steps.get_version.outputs.VERSION }}.html
          git add versions/${{ steps.get_version.outputs.VERSION }}.html
          git config --local user.email "none"
          git config --local user.name "github action"
          git commit -m "Publish ${{ steps.get_version.outputs.VERSION }}"
          git push
